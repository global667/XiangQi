ChessBoard API
==============

This API provide only static methods, so no need to instanciate an object from 
this class, you have just to do a static call to this methods.

You must notice that chessboard coordinate are zero based, so column values and
count from 0 to 7 to represent letters a to h (left to right) and rows and count 
from 0 to 7 to represent numbers 1 to 8 (bottom to top).
 

This API provide some methods to deal with FEN format like :
===========================================================
STARTPOSITION constant =>"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR"
assign_chessboard(FEN)
moveFromFEN(FEN,move)
show_chessboard()

1) assign_chessboard must be uses when to want to spit a FEN format into 
chessboard coordinate wihtout applying a move.
assign_chessboard method return a String array 8x8 size that represent a 
chessboard like this

  0 1 2 3 4 5 6 7 
8                 7
7                 6
6                 5
5                 4
4                 3
3                 2
2                 1
1                 0
  a b c d e f g h

row keep number identification, but col have number identification (zero base) where
0 mean a, 1 mean b,2 mean c, 3 mean d, 4 mean e, 5 mean f,6 mean g, 7 mean h

each square can contains a string like
rnbqkpRNBQKP
With is the international letters for representing chess pieces in ascii format.

You call show_chessboard() method after an assign_chessboard method.

Example :
-------
    String FEN="rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR";
    ChessBoard.assign_chessboard(FEN);
    ChessBoard.show_chessboard();

Return :
-------

*  a  b  c  d  e  f  g  h  *
8  r  n  b  q  k  b  n  r  8
7  p  p  p  p  p  p  p  p  7
6     #     #     #     #  6
5  #     #     #     #     5
4     #     #     #     #  4
3  #     #     #     #     3
2  P  P  P  P  P  P  P  P  2
1  R  N  B  Q  K  B  N  R  1
*  a  b  c  d  e  f  g  h  *


You can use the method show_wide_chessboard also, that print out a wide big 
board .

     a    b    c    d    e    f    g    h
  .----.----.----.----.----.----.----.----.
8 | br | bn | bb | bq | wk | bb | bn | br | 8
  .----.----.----.----.----.----.----.----.
7 | bp | bp | bp | bp | bp | bp | bp | bp | 7
  .----.----.----.----.----.----.----.----.
6 |    | ## |    | ## |    | ## |    | ## | 6
  .----.----.----.----.----.----.----.----.
5 | ## |    | ## |    | ## |    | ## |    | 5
  .----.----.----.----.----.----.----.----.
4 |    | ## |    | ## |    | ## |    | ## | 4
  .----.----.----.----.----.----.----.----.
3 | ## |    | ## |    | ## |    | ## |    | 3
  .----.----.----.----.----.----.----.----.
2 | wP | wP | wP | wP | wP | wP | wP | wP | 2
  .----.----.----.----.----.----.----.----.
1 | wR | wN | wB | wQ | wK | wB | wN | wR | 1
  .----.----.----.----.----.----.----.----.
     a    b    c    d    e    f    g    h


2) moveFromFEN (FEN,move), is a method that assign the chessboard with the FEN 
representation and so apply the ask move on it.
This method return a new FEN value with the applying move.

You call show_chessboard() method after an assign_chessboard method.

Example :
--------

    FEN=ChessBoard.moveFromFEN(FEN, "e2e4");
    System.out.println("Return FEN changes : "+FEN+"\n");

return :
------
Return FEN changes : rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR/


3) show_chessboard() method is a end output method that help you to 
naturally visualize the chessboard representation in a human form.

*  a  b  c  d  e  f  g  h  *
8  r  n  b  q  k  b  n  r  8
7  p  p  p  p  p  p  p  p  7
6     #     #     #     #  6
5  #     #     #     #     5
4     #     #     #     #  4
3  #     #     #     #     3
2  P  P  P  P  P  P  P  P  2
1  R  N  B  Q  K  B  N  R  1
*  a  b  c  d  e  f  g  h  *

Top, bottom lines and letters coordinate
Left and right column are number coordinate 
each corner have a star character.
black Square have a # character, and white Square are empty.
Chess pieces are show as is international representation letter.


This API provide some methods to deal with coordinate format like :
==================================================================

moveToCoord(move)
coordToMove(colFrom,rowFrom,colTo,rowTo,promote)
getColFrom()
getRowFrom()
getColTo()
getRowTo()
getPromote()

1) moveToCoord(move) method help you to convert a algebraic notation move to
chessboard numeric coordinate representation.
Where a=0, b=1, c=2, d=3, e=4,f=5,g=6, h=7
And promote piece if exist rnbqRNBQ are possible.

2) getColFrom, getRowFrom, getColTo, getRowTo, getPromote methods, help you
to get the values generated by moveTocoord method.
They can be called only after the mveToCoord method.

Example :
-------

ChessBoard.moveToCoord("e7e8Q");
System.out.println("From : "+ChessBoard.getColFrom()+"-"+ChessBoard.getRowFrom()+" To : "+ChessBoard.getColTo()+"-"+ChessBoard.getRowTo());
System.out.println("Promote = "+ChessBoard.getPromote()+"\n");
    
Return :
------

Transform e7e8Q move into chessboard coordinate
From : 4-6 To : 4-7
Promote = Q


4) coordToMove(colFrom,rowFrom,colTo,rowTo,promote) method help you to 
convert a chessboard numeric coordinate into a algebraic notation move.

Example :
-------

     System.out.println("Transform coordinate 6-7 5-5 into a move representation");
     System.out.println("move is : "+ChessBoard.coordToMove(6, 7, 5, 5,""));

Return :
------

Transform coordinate 6-7 5-5 into a move representation
move is : g8f6

This API provide a method to check all valid moves
==================================================

ArrayList<Position> get_list_of_valid_moves(String fen,int colPiece,int rowPiece)

This method take a String fen to assign a chessboard position and column and row 
position of a piece and return an ArrayList of position object with all the valid 
moves for this piece.
 
Example :
--------

       System.out.println("\"3k2rr/pPp4p/nPbP3P/3P4/P6b/4P3/pp1N2N1/4KQBR\", 5, 0 => white Queen possibls Moves?");
       ChessBoard.assign_chessboard("3k2rr/pPp4p/nPbP3P/3P4/P6b/4P3/pp1N2N1/4KQBR");
       ChessBoard.show_chessboard();
       ArrayList<ChessBoard.Position> ar=ChessBoard.get_list_of_valid_moves("3k2rr/pPp4p/nPbP3P/3P4/P6b/4P3/pp1N2N1/4KQBR", 5, 0);
                for (int i=0;i<ar.size();i++){
            System.out.println(((ChessBoard.Position) ar.get(i)).getCol()+"-"+((ChessBoard.Position) ar.get(i)).getRow());
       }

Return :
-------

"3k2rr/pPp4p/nPbP3P/3P4/P6b/4P3/pp1N2N1/4KQBR", 5, 0 => white Queen possible Moves?
*  a  b  c  d  e  f  g  h  *
8     #     k     #  r  r  8
7  p  P  p     #     #  p  7
6  n  P  b  P     #     P  6
5  #     #  P  #     #     5
4  P  #     #     #     b  4
3  #     #     P     #     3
2  p  p     N     #  N  #  2
1  #     #     K  Q  B  R  1
*  a  b  c  d  e  f  g  h  *

Possible moves for white Queen f1 :
5-1
5-2
5-3
5-4
5-5
5-6
5-7
4-1
3-2
2-3
1-4
0-5  


Some useful methods
===================

-> boolean blackKingIsThreat(int c,int r)
-> boolean whiteKingIsThreat(int c,int r)

This two methods help you to know if Black King oe White King is in a Threated position i
it take the new coordinate destination.

Example :
-------

//can i play this move ?
if (!whiteKingIsThreat(3,1)) System.out.println("you can play this move;


-> boolean square_is_Empty(int c,int r)
-> boolean pieceIsBlack(int c, int r)
-> boolean pieceIsWhite(int c, int r)

This three methods can help you to know if a square of the designed coordinate is an 
empty square or have a white piece or a black piece.


-> boolean square_is_black(int c,int r)

Help you to test if the coordinate square is a black square or a white square, 
return true if black otherwise false. 


-> boolean pieceIN(int c,int r,String pieces)

Test if a square have a sp√©cial piece in the pieces String list.

The String list must only use rnbqkpRNBQKP letters.

Example :
-------
//test if square g1 is white King
if (pieceIN(6,0,"K")) return true;

//test if square b7 is an black bishop or block root "br"
if (pieceIN(2,6,"br")) return true;

